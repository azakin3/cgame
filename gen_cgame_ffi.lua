-- reads C declarations from files, between 'script_begin'/'script_end' blocks
-- or on 'script_export' lines, generates string to send to ffi.cdef(...)
function readdef(filenames)
    local str = ''
    for _, filename in pairs(filenames) do
        local file = assert(io.open(filename, 'r'))
        local in_script = 0
        str = str .. '    /* ' .. filename .. ' */\n'
        while true do
            local line = file:read()
            if line == nil then break end

            if line:find('script_begin') then
                in_script = in_script + 1
            elseif line:find('script_end') and in_script > 0 then
                in_script = in_script - 1
            elseif in_script > 0 or line:find('script_export') then
                if line == '' then
                    str = str .. '\n'
                else
                    str = string.format('%s    "%s\\n"\n', str, line)
                end
            end
        end
    end

    return str
end

-- write out file with a nice header

local fmt =
[[
/* 
 * C interface visible from Lua
 * 
 * automatically generated by gen_cgame_ffi.lua from 'script_begin/script_end'
 * blocks and 'script_export' lines
 *
 * pass the string 'cgame_ffi' to ffi.cdef(...) in LuaJIT
 */

static const char cgame_ffi[] =
%s
    ;
]]

local str = readdef
{
    'vec2.h',
    'game.h',
    'entity.h',
    'transform.h',
    'sprite.h',

    'test/keyboard_controlled.h'
}

local file = assert(io.open('cgame_ffi.h', 'w'))
file:write(string.format(fmt, str))

