MATRICES ARE IN COLUMN MAJOR ORDER (to reflect GLSL)


dependencies
------------

- gl
- glfw3 (included in ext/)
- glew (included in ext/)
- stb_image (included in ext/)
- luajit (included in ext/)
- chipmunk (included in ext/)


ideas
-----

- message system: there is none -- instead you just have a system that
  best does the job you want -- why generic messages? do each thing the best
  way it can be done ('collision' message would just be a collision system that
  stores a dual map of two ids to the collision contact, etc.)

- in edit mode each system has its own window with all entities, when you
  select one it focuses on the right row -- allows system-specific interfaces
  (transform is a tree etc.)

- is the system-data extremely tight coupling right now good?
    - it made it easy to see all the data about, for example, sprites,
      visualize the invariants and make sure they held on *_remove() etc.


todo
----

- hard: add versioning to C save/load system

- easy: annotate printf/scanf-like functions to get clang warnings
  for bad formats

- easy: make entity_destroyed(ent) be true iff. on 2nd pass of
  destroyed map?

- easy: move window stuff from game into a new window system
  (bg_color, size)

- easy: serialize global physics properties, expose more physics
  functions

- hard: add sprite animation


files
-----

- src/: C code for core (except in test directory)
- data/ data for core (except in test directory)

- src/test/: C code for test game
- data/test: data for test game

- data/cgame.lua: cgame lua interface -- available as cgame.entity_create() etc.
- data/main.lua: startup script -- run on game start

- cgame_ffi.h: C interface for Lua


systems
-------

- script
- timing
- input
- texture
- text
- console
- edit

- entity
- transform
- camera
- sprite
- physics
- gui


